================================================================================
umf_2by2.c
================================================================================
     28    678	    #####:  676:			    cmax = value ;
================================================================================
umf_analyze.c
================================================================================
     32    218	    #####:  216:	    return (FALSE) ;	/* internal error! */
================================================================================
umf_apply_order.c
================================================================================
================================================================================
umf_assemble.c
================================================================================
================================================================================
umf_assemble_fixq.c
================================================================================
================================================================================
umf_blas3_update.c
================================================================================
================================================================================
umf_build_tuples.c
================================================================================
     32     79	    #####:   77:		return (FALSE) ;	/* out of memory for row tuples */
     32     97	    #####:   95:		return (FALSE) ;	/* out of memory for col tuples */
================================================================================
umf_colamd.c
================================================================================
     16   1965	    #####: 1963:	    pivot_row = EMPTY ;
     20   2261	    #####: 2259:	    tag_mark = clear_mark (n_row, Row) ;
     32   2705	    #####: 2703:		KILL_ROW (r) ;
================================================================================
umf_create_element.c
================================================================================
     20    137	    #####:  135:	    Work->cdeg0 = 1 ;
     20    139	    #####:  137:	    for (e = 1 ; e <= Work->nel ; e++)
     20    141	    #####:  139:		if (E [e])
     20    143	    #####:  141:		    ep = (Element *) (Memory + E [e]) ;
     20    144	    #####:  142:		    ep->cdeg = 0 ;
     20    158	    #####:  156:	    Work->rdeg0 = 1 ;
     20    160	    #####:  158:	    for (e = 1 ; e <= Work->nel ; e++)
     20    162	    #####:  160:		if (E [e])
     20    164	    #####:  162:		    ep = (Element *) (Memory + E [e]) ;
     20    165	    #####:  163:		    ep->rdeg = 0 ;
      8    245	    #####:  243:	if (!UMF_get_memory (Numeric, Work, needunits, r2, c2, do_Fcpos))
     32    249	    #####:  247:	    return (FALSE) ;	/* out of memory */
      8    251	    #####:  249:	got_memory = TRUE ;
      8    252	    #####:  250:	Memory = Numeric->Memory ;
      8    253	    #####:  251:	eloc = UMF_mem_alloc_element (Numeric, fnrows, fncols, &Rows, &Cols, &C,
      8    256	    #####:  254:	if (!eloc)
     32    260	    #####:  258:	    return (FALSE) ;	/* out of memory */
      8    337	    #####:  335:	for (tuple.f = 0 ; tuple.f < fncols ; tuple.f++)
      8    339	    #####:  337:	    col = Fcols [tuple.f] ;
      8    343	    #####:  341:	    tp = ((Tuple *) (Memory + Col_tuples [col])) + Col_tlen [col]++ ;
      8    344	    #####:  342:	    *tp = tuple ;
      8    350	    #####:  348:	for (tuple.f = 0 ; tuple.f < fnrows ; tuple.f++)
      8    352	    #####:  350:	    row = Frows [tuple.f] ;
      8    356	    #####:  354:	    tp = ((Tuple *) (Memory + Row_tuples [row])) + Row_tlen [row]++ ;
      8    357	    #####:  355:	    *tp = tuple ;
     32    448	    #####:  446:		    return (UMF_get_memory (Numeric, Work, 0, r2, c2,do_Fcpos));
     32    551	    #####:  549:		    return (UMF_get_memory (Numeric, Work, 0, r2, c2,do_Fcpos));
================================================================================
umf_extend_front.c
================================================================================
================================================================================
umf_free.c
================================================================================
================================================================================
umf_fsize.c
================================================================================
     32     54	    #####:   52:		frsize = Int_MAX ;
================================================================================
umf_garbage_collection.c
================================================================================
================================================================================
umf_get_memory.c
================================================================================
     32    110	    #####:  108:	newsize = (Int) bsize ;	/* we cannot increase the size beyond bsize */
================================================================================
umf_grow_front.c
================================================================================
     32     89	    #####:   87:	return (FALSE) ;
     32    117	    #####:  115:	double a = 0.9 * sqrt ((Int_MAX / sizeof (Entry)) / s) ;
     32    118	    #####:  116:	fnr2 = MAX (fnr_min, a * fnr2) ;
     32    119	    #####:  117:	fnc2 = MAX (fnc_min, a * fnc2) ;
     32    121	    #####:  119:	newsize = fnr2 * fnc2 ;
     32    123	    #####:  121:	if (fnr2 % 2 == 0) fnr2++ ;
     32    124	    #####:  122:	fnc2 = newsize / fnr2 ;
     32    182	    #####:  180:	    return (FALSE) ;	/* out of memory */
================================================================================
umf_init_front.c
================================================================================
     32     76	    #####:   74:	    return (FALSE) ;
================================================================================
umf_is_permutation.c
================================================================================
================================================================================
umf_kernel.c
================================================================================
     32    167	    #####:  165:		    return (UMFPACK_ERROR_different_pattern) ;
================================================================================
umf_kernel_init.c
================================================================================
     32    513	    #####:  511:	return (FALSE) ;	/* pattern changed */
     32    541	    #####:  539:	    return (FALSE) ;	/* pattern changed */
     32    605	    #####:  603:		return (FALSE) ;	/* pattern has changed */
     32    641	    #####:  639:		    return (FALSE) ;	/* pattern has changed */
     32    709	    #####:  707:		    return (FALSE) ;	/* pattern changed */
     32    734	    #####:  732:	    return (FALSE) ;	/* pattern changed */
     32    862	    #####:  860:	    return (FALSE) ;	/* pattern changed */
     32    904	    #####:  902:	    return (FALSE) ;	/* pattern changed */
     32    918	    #####:  916:	    return (FALSE) ;	/* pattern changed */
     32   1030	    #####: 1028:	return (FALSE) ;	/* pattern changed */
================================================================================
umf_kernel_wrapup.c
================================================================================
================================================================================
umf_lhsolve.c
================================================================================
================================================================================
umf_local_search.c
================================================================================
     32    648	    #####:  646:				return (UMFPACK_ERROR_different_pattern) ;
     32    737	    #####:  735:	    return (UMFPACK_ERROR_different_pattern) ;
     32   1046	    #####: 1044:				return (UMFPACK_ERROR_different_pattern) ;
     32   1095	    #####: 1093:	    return (UMFPACK_ERROR_different_pattern) ;
================================================================================
umf_lsolve.c
================================================================================
================================================================================
umf_ltsolve.c
================================================================================
================================================================================
umf_malloc.c
================================================================================
================================================================================
umf_mem_alloc_element.c
================================================================================
     32     45	    #####:   43:	return (0) ;	/* problem is too large */
      8     53	    #####:   51:	return (0) ;	/* out of memory */
================================================================================
umf_mem_alloc_head_block.c
================================================================================
================================================================================
umf_mem_alloc_tail_block.c
================================================================================
================================================================================
umf_mem_free_tail_block.c
================================================================================
================================================================================
umf_mem_init_memoryspace.c
================================================================================
================================================================================
umf_realloc.c
================================================================================
     32     54	    #####:   52:	return ((void *) NULL) ;
================================================================================
umf_report_perm.c
================================================================================
================================================================================
umf_report_vector.c
================================================================================
================================================================================
umf_row_search.c
================================================================================
     32    615	    #####:  613:		    return (UMFPACK_ERROR_different_pattern) ;
     32    661	    #####:  659:				return (UMFPACK_ERROR_different_pattern) ;
     32    748	    #####:  746:		return (UMFPACK_ERROR_different_pattern) ;
     32    792	    #####:  790:				return (UMFPACK_ERROR_different_pattern) ;
================================================================================
umf_scale.c
================================================================================
================================================================================
umf_scale_column.c
================================================================================
================================================================================
umf_set_stats.c
================================================================================
================================================================================
umf_singletons.c
================================================================================
================================================================================
umf_solve.c
================================================================================
     28    667	    #####:  665:			for (i = 0 ; i < n ; i++)
     28    669	    #####:  667:			    SCALE_DIV (Z [i], Rs [i]) ;
     28    940	    #####:  938:			for (i = 0 ; i < n ; i++)
     28    942	    #####:  940:			    SCALE_DIV (Z [i], Rs [i]) ;
     32   1306	    #####: 1304:	    omega [1] = tau ;
     32   1307	    #####: 1305:	    omega [2] = tau ;
     32   1308	    #####: 1306:	    break ;
      5   1358	    #####: 1356:	if (omega [0] > last_omega [0])
     12   1362	    #####: 1360:	    for (i = 0 ; i < n ; i++)
     12   1364	    #####: 1362:		X [i] = S [i] ;
     12   1366	    #####: 1364:	    Info [UMFPACK_OMEGA1] = last_omega [1] ;
     12   1367	    #####: 1365:	    Info [UMFPACK_OMEGA2] = last_omega [2] ;
      5   1369	    #####: 1367:	Info [UMFPACK_IR_TAKEN] = step - 1 ;
      5   1372	    #####: 1370:	return (TRUE) ;
================================================================================
umf_start_front.c
================================================================================
     32    152	    #####:  150:	maxfrsize = Int_MAX / sizeof (Entry) ;
     32    171	    #####:  169:	    fsize = Int_MAX / sizeof (Entry) ;
     32    189	    #####:  187:		fsize2 = Int_MAX / sizeof (Entry) ;
================================================================================
umf_store_lu.c
================================================================================
     32    345	    #####:  343:		return (FALSE) ;	/* out of memory */
     32    351	    #####:  349:		return (FALSE) ;	/* out of memory */
     32    770	    #####:  768:		return (FALSE) ;	/* out of memory */
     32    777	    #####:  775:		return (FALSE) ;	/* out of memory */
================================================================================
umf_store_lu_drop.c
================================================================================
     32    325	    #####:  323:	    Int r2, c2 ;
     32    328	    #####:  326:	    if (Work->do_grow)
     32    332	    #####:  330:		r2 = fnrows ;
     32    333	    #####:  331:		c2 = fncols ;
     32    338	    #####:  336:		r2 = MAX (fnrows, Work->fnrows_new + 1) ;
     32    339	    #####:  337:		c2 = MAX (fncols, Work->fncols_new + 1) ;
     32    342	    #####:  340:	    if (!UMF_get_memory (Numeric, Work, size, r2, c2, TRUE))
     32    345	    #####:  343:		return (FALSE) ;	/* out of memory */
     32    347	    #####:  345:	    p = UMF_mem_alloc_head_block (Numeric, size) ;
     32    348	    #####:  346:	    if (!p)
     32    351	    #####:  349:		return (FALSE) ;	/* out of memory */
     32    354	    #####:  352:	    fnc_curr = Work->fnc_curr ;
     32    355	    #####:  353:	    fnr_curr = Work->fnr_curr ;
     32    356	    #####:  354:	    Flublock = Work->Flublock ;
     32    357	    #####:  355:	    Flblock  = Work->Flblock ;
     32    358	    #####:  356:	    Fublock  = Work->Fublock ;
     32    359	    #####:  357:	    Fl1 = Flublock + kk * nb ;
     32    360	    #####:  358:	    Fl2 = Flblock  + kk * fnr_curr ;
     32    493	    #####:  491:			pos = llen++ ;
     32    494	    #####:  492:			Lpattern [pos] = row2 ;
     32    495	    #####:  493:			Lpos [row2] = pos ;
     32    496	    #####:  494:			*Li++ = row2 ;
     32    749	    #####:  747:	    Int r2, c2 ;
     32    752	    #####:  750:	    if (Work->do_grow)
     32    756	    #####:  754:		r2 = fnrows ;
     32    757	    #####:  755:		c2 = fncols ;
     32    762	    #####:  760:		r2 = MAX (fnrows, Work->fnrows_new + 1) ;
     32    763	    #####:  761:		c2 = MAX (fncols, Work->fncols_new + 1) ;
     32    766	    #####:  764:	    if (!UMF_get_memory (Numeric, Work, size, r2, c2, TRUE))
     32    770	    #####:  768:		return (FALSE) ;	/* out of memory */
     32    772	    #####:  770:	    p = UMF_mem_alloc_head_block (Numeric, size) ;
     32    773	    #####:  771:	    if (!p)
     32    777	    #####:  775:		return (FALSE) ;	/* out of memory */
     32    780	    #####:  778:	    fnc_curr = Work->fnc_curr ;
     32    781	    #####:  779:	    fnr_curr = Work->fnr_curr ;
     32    782	    #####:  780:	    Flublock = Work->Flublock ;
     32    783	    #####:  781:	    Flblock  = Work->Flblock ;
     32    784	    #####:  782:	    Fublock  = Work->Fublock ;
     32    785	    #####:  783:	    Fu1 = Flublock + kk ;
     32    786	    #####:  784:	    Fu2 = Fublock  + kk * fnc_curr ;
================================================================================
umf_symbolic_usage.c
================================================================================
================================================================================
umf_transpose.c
================================================================================
================================================================================
umf_triplet_map_nox.c
================================================================================
================================================================================
umf_triplet_map_x.c
================================================================================
================================================================================
umf_triplet_nomap_nox.c
================================================================================
================================================================================
umf_triplet_nomap_x.c
================================================================================
================================================================================
umf_tuple_lengths.c
================================================================================
================================================================================
umf_uhsolve.c
================================================================================
     32    155	    #####:  153:		for (j = 0 ; j < deg ; j++)
     32    157	    #####:  155:		    Pattern [j] = Numeric->Upattern [j] ;
================================================================================
umf_usolve.c
================================================================================
     32     81	    #####:   79:	for (j = 0 ; j < deg ; j++)
     32     86	    #####:   84:	    Pattern [j] = Numeric->Upattern [j] ;
================================================================================
umf_utsolve.c
================================================================================
     32    155	    #####:  153:		for (j = 0 ; j < deg ; j++)
     32    157	    #####:  155:		    Pattern [j] = Numeric->Upattern [j] ;
================================================================================
umf_valid_numeric.c
================================================================================
================================================================================
umf_valid_symbolic.c
================================================================================
================================================================================
umfpack_col_to_triplet.c
================================================================================
================================================================================
umfpack_defaults.c
================================================================================
================================================================================
umfpack_free_numeric.c
================================================================================
================================================================================
umfpack_free_symbolic.c
================================================================================
================================================================================
umfpack_get_determinant.c
================================================================================
     32    215	    #####:  213:		Info [UMFPACK_STATUS] = UMFPACK_WARNING_singular_matrix ;
     32    216	    #####:  214:		break ;
================================================================================
umfpack_get_lunz.c
================================================================================
================================================================================
umfpack_get_numeric.c
================================================================================
================================================================================
umfpack_get_symbolic.c
================================================================================
================================================================================
umfpack_load_numeric.c
================================================================================
     32     98	    #####:   96:	(void) UMF_free ((void *) Numeric) ;
     32     99	    #####:   97:	fclose (f) ;
     32    100	    #####:   98:	return (UMFPACK_ERROR_file_IO) ;
     32    157	    #####:  155:	UMFPACK_free_numeric ((void **) &Numeric) ;
     32    158	    #####:  156:	return (UMFPACK_ERROR_invalid_Numeric_object) ;
================================================================================
umfpack_load_symbolic.c
================================================================================
     32     98	    #####:   96:	(void) UMF_free ((void *) Symbolic) ;
     32     99	    #####:   97:	fclose (f) ;
     32    100	    #####:   98:	return (UMFPACK_ERROR_file_IO) ;
     32    161	    #####:  159:	UMFPACK_free_symbolic ((void **) &Symbolic) ;
     32    162	    #####:  160:	return (UMFPACK_ERROR_invalid_Symbolic_object) ;
================================================================================
umfpack_numeric.c
================================================================================
     32    185	    #####:  183:	Info [UMFPACK_STATUS] = UMFPACK_ERROR_out_of_memory ;
     32    186	    #####:  184:	return (UMFPACK_ERROR_out_of_memory) ;
================================================================================
umfpack_qsymbolic.c
================================================================================
     32    502	    #####:  500:	Info [UMFPACK_STATUS] = UMFPACK_ERROR_out_of_memory ;
     32    503	    #####:  501:	return (UMFPACK_ERROR_out_of_memory) ;
     32    852	    #####:  850:	    Info [UMFPACK_STATUS] = UMFPACK_ERROR_out_of_memory ;
     32    853	    #####:  851:	    error (&Symbolic, SW) ;
     32    854	    #####:  852:	    return (UMFPACK_ERROR_out_of_memory) ;
     32    873	    #####:  871:		Info [UMFPACK_STATUS] = UMFPACK_ERROR_out_of_memory ;
     32    874	    #####:  872:		error (&Symbolic, SW) ;
     32    875	    #####:  873:		return (UMFPACK_ERROR_out_of_memory) ;
     32    942	    #####:  940:		strategy = UMFPACK_STRATEGY_2BY2 ;
     32   1422	    #####: 1420:	    Info [UMFPACK_STATUS] = UMFPACK_ERROR_internal_error ;
     32   1423	    #####: 1421:	    error (&Symbolic, SW) ;
     32   1424	    #####: 1422:	    return (UMFPACK_ERROR_internal_error) ;
     32   1781	    #####: 1779:	    Info [UMFPACK_STATUS] = UMFPACK_ERROR_out_of_memory ;
     32   1782	    #####: 1780:	    error (&Symbolic, SW) ;
     32   1783	    #####: 1781:	    return (UMFPACK_ERROR_out_of_memory) ;
================================================================================
umfpack_report_control.c
================================================================================
================================================================================
umfpack_report_info.c
================================================================================
      4    501	    #####:  499:	PRINT_INFO (
      4    507	    #####:  505:	PRINT_INFO (
      4    521	    #####:  519:	    PRINT_INFO (
      4    535	    #####:  533:	    PRINT_INFO (
      4    565	    #####:  563:	PRINT_INFO (
      4    571	    #####:  569:	PRINT_INFO (
      4    593	    #####:  591:		PRINT_INFO (
      4    610	    #####:  608:		PRINT_INFO (
================================================================================
umfpack_report_matrix.c
================================================================================
================================================================================
umfpack_report_numeric.c
================================================================================
     32    323	    #####:  321:		return (FALSE) ;
     32    329	    #####:  327:		PRINTF (("\t...\n")) ;
     32    330	    #####:  328:		prl-- ;
     32    531	    #####:  529:	    return (FALSE) ;
     32    638	    #####:  636:	    PRINTF (("    ...\n")) ;
     32    639	    #####:  637:	    prl-- ;
     32    650	    #####:  648:		return (FALSE) ;
     32    656	    #####:  654:		PRINTF (("\t...\n")) ;
     32    657	    #####:  655:		prl-- ;
================================================================================
umfpack_report_perm.c
================================================================================
================================================================================
umfpack_report_status.c
================================================================================
================================================================================
umfpack_report_symbolic.c
================================================================================
================================================================================
umfpack_report_triplet.c
================================================================================
================================================================================
umfpack_report_vector.c
================================================================================
================================================================================
umfpack_save_numeric.c
================================================================================
================================================================================
umfpack_save_symbolic.c
================================================================================
================================================================================
umfpack_scale.c
================================================================================
================================================================================
umfpack_solve.c
================================================================================
================================================================================
umfpack_symbolic.c
================================================================================
================================================================================
umfpack_tictoc.c
================================================================================
================================================================================
umfpack_timer.c
================================================================================
================================================================================
umfpack_transpose.c
================================================================================
================================================================================
umfpack_triplet_to_col.c
================================================================================
================================================================================
umfpack_wsolve.c
================================================================================
     32    143	    #####:  141:	Info [UMFPACK_STATUS] = UMFPACK_ERROR_invalid_system ;
     32    144	    #####:  142:	return (UMFPACK_ERROR_invalid_system) ;
     32    157	    #####:  155:	Info [UMFPACK_STATUS] = UMFPACK_ERROR_argument_missing ;
     32    158	    #####:  156:	return (UMFPACK_ERROR_argument_missing) ;
     32    164	    #####:  162:	irstep = 0 ;
================================================================================
amd_1.c
================================================================================
================================================================================
amd_2.c
================================================================================
     20    994	    #####:  992:	    for (x = 0 ; x < n ; x++)
     20    996	    #####:  994:		if (W [x] != 0) W [x] = 1 ;
     20    998	    #####:  996:	    wflg = 2 ;
     20   1283	    #####: 1281:	    for (x = 0 ; x < n ; x++)
     20   1285	    #####: 1283:		if (W [x] != 0) W [x] = 1 ;
     20   1287	    #####: 1285:	    wflg = 2 ;
================================================================================
amd_aat.c
================================================================================
================================================================================
amd_control.c
================================================================================
================================================================================
amd_defaults.c
================================================================================
================================================================================
amd_info.c
================================================================================
================================================================================
amd_order.c
================================================================================
     32     77	    #####:   75:	if (info) Info [AMD_STATUS] = AMD_OUT_OF_MEMORY ;
     32     78	    #####:   76:	return (AMD_OUT_OF_MEMORY) ;
     32     96	    #####:   94:	if (info) Info [AMD_STATUS] = AMD_OUT_OF_MEMORY ;
     32     97	    #####:   95:	return (AMD_OUT_OF_MEMORY) ;
     32    119	    #####:  117:	FREE (Len) ;
     32    120	    #####:  118:	if (Info != (double *) NULL) Info [AMD_STATUS] = AMD_OUT_OF_MEMORY ;
     32    121	    #####:  119:	return (AMD_OUT_OF_MEMORY) ;
================================================================================
amd_postorder.c
================================================================================
================================================================================
amd_post_tree.c
================================================================================
================================================================================
amd_preprocess.c
================================================================================
     32     56	    #####:   54:	return (AMD_OUT_OF_MEMORY) ;
     32     61	    #####:   59:	FREE (W) ;
     32     62	    #####:   60:	return (AMD_OUT_OF_MEMORY) ;
================================================================================
amd_valid.c
================================================================================
================================================================================
Last line of each output file: 
================================================================================
Out/1_di/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 7.08e-05 arc130 2.48e-10 omega2) cputime 53.06
=================================================================
Out/1_dl/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 7.08e-05 arc130 2.48e-10 omega2) cputime 43.32
=================================================================
Out/1_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.31e-05 arc130 3.37e-10 omega2) cputime 85.79
=================================================================
Out/1_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.31e-05 arc130 3.37e-10 omega2) cputime 86.36
=================================================================
Out/1g_di/ut.out
ALL TESTS PASSED: rnorm 1.03e-10 (1.19e-07 shl0, 5.65e-05 arc130 1.84e-10 omega2) cputime 36.47
=================================================================
Out/1g_dl/ut.out
ALL TESTS PASSED: rnorm 1.03e-10 (1.19e-07 shl0, 5.65e-05 arc130 1.84e-10 omega2) cputime 30.99
=================================================================
Out/1g_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.77e-05 arc130 5.45e-10 omega2) cputime 68.47
=================================================================
Out/1g_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.77e-05 arc130 5.45e-10 omega2) cputime 68.32
=================================================================
Out/2_di/ut.out
ALL TESTS PASSED: rnorm 1.49e-10 (1.37e-07 shl0, 6.76e-05 arc130 1.61e-10 omega2) cputime 44.29
=================================================================
Out/2_dl/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 7.08e-05 arc130 2.48e-10 omega2) cputime 43.12
=================================================================
Out/2_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.40e-07 shl0, 6.77e-05 arc130 5.86e-10 omega2) cputime 66.8
=================================================================
Out/2_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.31e-05 arc130 3.37e-10 omega2) cputime 85.12
=================================================================
Out/2g_di/ut.out
ALL TESTS PASSED: rnorm 1.06e-10 (1.37e-07 shl0, 5.65e-05 arc130 2.12e-10 omega2) cputime 29.98
=================================================================
Out/2g_dl/ut.out
ALL TESTS PASSED: rnorm 1.03e-10 (1.19e-07 shl0, 5.65e-05 arc130 1.84e-10 omega2) cputime 31
=================================================================
Out/2g_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.40e-07 shl0, 7.77e-05 arc130 2.02e-10 omega2) cputime 50.01
=================================================================
Out/2g_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.77e-05 arc130 5.45e-10 omega2) cputime 68.45
=================================================================
Out/3_di/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 6.76e-05 arc130 2.74e-10 omega2) cputime 50.4
=================================================================
Out/3_dl/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 7.08e-05 arc130 2.48e-10 omega2) cputime 42.67
=================================================================
Out/3_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.40e-07 shl0, 6.77e-05 arc130 9.72e-10 omega2) cputime 84.28
=================================================================
Out/3_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.31e-05 arc130 3.37e-10 omega2) cputime 85.67
=================================================================
Out/3g_di/ut.out
ALL TESTS PASSED: rnorm 1.03e-10 (1.19e-07 shl0, 5.65e-05 arc130 1.84e-10 omega2) cputime 35.06
=================================================================
Out/3g_dl/ut.out
ALL TESTS PASSED: rnorm 1.03e-10 (1.19e-07 shl0, 5.65e-05 arc130 1.84e-10 omega2) cputime 30.91
=================================================================
Out/3g_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.40e-07 shl0, 7.77e-05 arc130 7.58e-10 omega2) cputime 67.41
=================================================================
Out/3g_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.77e-05 arc130 5.45e-10 omega2) cputime 68.2
=================================================================
Out/4_di/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 6.76e-05 arc130 2.74e-10 omega2) cputime 49.96
=================================================================
Out/4_dl/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 7.08e-05 arc130 2.48e-10 omega2) cputime 43.42
=================================================================
Out/4_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.40e-07 shl0, 6.77e-05 arc130 9.72e-10 omega2) cputime 84.19
=================================================================
Out/4_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.31e-05 arc130 3.37e-10 omega2) cputime 84.62
=================================================================
Out/4g_di/ut.out
ALL TESTS PASSED: rnorm 1.03e-10 (1.19e-07 shl0, 5.65e-05 arc130 1.84e-10 omega2) cputime 35.29
=================================================================
Out/4g_dl/ut.out
ALL TESTS PASSED: rnorm 1.03e-10 (1.19e-07 shl0, 5.65e-05 arc130 1.84e-10 omega2) cputime 31.52
=================================================================
Out/4g_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.40e-07 shl0, 7.77e-05 arc130 7.58e-10 omega2) cputime 67.31
=================================================================
Out/4g_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.77e-05 arc130 5.45e-10 omega2) cputime 68.49
=================================================================
Out/5_di/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 8.09e-05 arc130 1.95e-10 omega2) cputime 52.15
=================================================================
Out/5_dl/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 8.09e-05 arc130 1.95e-10 omega2) cputime 43.01
=================================================================
Out/5_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 8.10e-05 arc130 5.57e-10 omega2) cputime 85.55
=================================================================
Out/5_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 8.10e-05 arc130 5.57e-10 omega2) cputime 85.94
=================================================================
Out/6_di/ut.out
ALL TESTS PASSED: rnorm 1.49e-10 (1.37e-07 shl0, 6.76e-05 arc130 1.61e-10 omega2) cputime 0
=================================================================
Out/6_dl/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 7.08e-05 arc130 2.48e-10 omega2) cputime 0
=================================================================
Out/6_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.40e-07 shl0, 6.77e-05 arc130 5.86e-10 omega2) cputime 0
=================================================================
Out/6_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.31e-05 arc130 3.37e-10 omega2) cputime 0
=================================================================
Out/7_di/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 7.08e-05 arc130 2.48e-10 omega2) cputime 51.55
=================================================================
Out/7_dl/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 7.08e-05 arc130 2.48e-10 omega2) cputime 42.53
=================================================================
Out/7_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.31e-05 arc130 3.37e-10 omega2) cputime 84.84
=================================================================
Out/7_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.31e-05 arc130 3.37e-10 omega2) cputime 86.03
=================================================================
Out/8_di/ut.out
ALL TESTS PASSED: rnorm 1.49e-10 (1.37e-07 shl0, 6.76e-05 arc130 1.61e-10 omega2) cputime 43.61
=================================================================
Out/8_dl/ut.out
ALL TESTS PASSED: rnorm 1.35e-10 (1.19e-07 shl0, 7.08e-05 arc130 2.48e-10 omega2) cputime 42.8
=================================================================
Out/8_zi/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.40e-07 shl0, 6.77e-05 arc130 5.86e-10 omega2) cputime 66.71
=================================================================
Out/8_zl/ut.out
ALL TESTS PASSED: rnorm 9.88e-05 (1.33e-07 shl0, 7.31e-05 arc130 3.37e-10 omega2) cputime 84.96
=================================================================
